[global]
Module=PDirectory
Header=PDirectory.h
CodeFileName=PDirectory.cpp
ParentHeaderName="PNode.h"

[includes]
<Directory.h>
<Entry.h>
<File.h>
<Path.h>
<SymLink.h>

[object]
Name=PDirectory
FriendlyName=Directory
Description=An object representing a directory in the filesystem
UsesView=false
ParentClass=public PNode
GetBackend=true

[properties]
Property int(0) EntryCount : The number of entries in the directory
	GetValue:CountEntries(void)

Property bool(false) IsRoot : True if the directory is the root of a volume
	GetValue:IsRootDirectory(void)

[methods]
Method Contains
	Param string path(string), 1 : A relative path or filename
	Param int32 type(int32){B_ANY_NODE}, 2 : An optional node type
	Return bool value(int32), -1 : True if the directory (or a subdirectory) constains the path

Method CreateDirectory
	Param string path(string), 1 : A relative path
	Return string path(string), 2 : The full path of the created directory
	Return int32 status(int32), -1 : The error status of the call
BeginEmbeddedCode
	if (!pobject || !in || !out)
		return B_ERROR;
	
	PDirectory *parent = static_cast<PDirectory*>(pobject);
	if (!parent)
		return B_BAD_TYPE;
	
	BDirectory *backend = (BDirectory*)parent->GetBackend();
	
	PArgs *args = static_cast<PArgs*>(in), *outArgs = static_cast<PArgs*>(out);
	
	BString path;
	if (args->FindString("path", &path) != B_OK)
		return B_ERROR;
	
	BDirectory newDir;
	status_t status = backend->CreateDirectory(path.String(), &newDir);
	
	outArgs->MakeEmpty();
	
	if (status == B_OK)
	{
		BEntry entry;
		status = newDir.GetEntry(&entry);
		if (status == B_OK)
		{
			BPath dirPath;
			status = entry.GetPath(&dirPath);
			outArgs->AddString("path", dirPath.Path());
		}
	}
	
	outArgs->AddInt32("status", status);
	
	return B_OK;
EndEmbeddedCode


Method CreateFile
	Param string path(string), 1 : A relative path
	Param bool dontclobber(bool), 2 : Fail if the file already exists if true
	Return int32 status(int32), -1 : The error status of the call
BeginEmbeddedCode
	if (!pobject || !in || !out)
		return B_ERROR;
	
	PDirectory *parent = static_cast<PDirectory*>(pobject);
	if (!parent)
		return B_BAD_TYPE;
	
	BDirectory *backend = (BDirectory*)parent->GetBackend();
	
	PArgs *args = static_cast<PArgs*>(in), *outArgs = static_cast<PArgs*>(out);
	
	BString path;
	if (args->FindString("path", &path) != B_OK)
		return B_ERROR;
	
	bool dontClobber = false;
	if (args->FindBool("dontclobber", &dontClobber) != B_OK)
		return B_ERROR;
	
	BFile newFile;
	status_t status = backend->CreateFile(path.String(), &newFile,
										dontClobber);
	
	outArgs->MakeEmpty();
	outArgs->AddInt32("status", status);
	
	return B_OK;
EndEmbeddedCode


Method CreateSymLink
	Param string path(string), 1 : A relative path
	Param string target(string), 2 : Path of the link's target
	Return int32 status(int32), -1 : The error status of the call
BeginEmbeddedCode
	if (!pobject || !in || !out)
		return B_ERROR;
	
	PDirectory *parent = static_cast<PDirectory*>(pobject);
	if (!parent)
		return B_BAD_TYPE;
	
	BDirectory *backend = (BDirectory*)parent->GetBackend();
	
	PArgs *args = static_cast<PArgs*>(in), *outArgs = static_cast<PArgs*>(out);
	
	BString path;
	if (args->FindString("path", &path) != B_OK)
		return B_ERROR;
	
	BString target;
	if (args->FindString("target", &target) != B_OK)
		return B_ERROR;
	
	BSymLink link;
	status_t status = backend->CreateSymLink(path.String(),
											target.String(), &link);
	
	outArgs->MakeEmpty();
	outArgs->AddInt32("status", status);
	
	return B_OK;
EndEmbeddedCode


Method GetEntries
	Return list entries(list), 1 : A list of filenames in the directory
BeginEmbeddedCode
	if (!pobject || !in || !out)
		return B_ERROR;
	
	PDirectory *parent = static_cast<PDirectory*>(pobject);
	if (!parent)
		return B_BAD_TYPE;
	
	BDirectory *backend = (BDirectory*)parent->GetBackend();
	
	PArgs *outArgs = static_cast<PArgs*>(out);
	outArgs->MakeEmpty();
	
	PArgs nameList;
	backend->Rewind();
	entry_ref ref;
	while (backend->GetNextRef(&ref) == B_OK)
	{
		if (ref.name)
			outArgs->AddString("name", ref.name);
	}
	
	return B_OK;
EndEmbeddedCode


[backend]
Type=Single
Class=BDirectory
# Use the default(empty) constructor, so no InitCode
