[global]
Module=PListView
Header=PListView.h
CodeFileName=PListView.cpp
ParentHeaderName="PView.h"

[includes]
<Application.h>
<ListView.h>
<ListItem.h>
<stdio.h>
<Window.h>

[object]
Name=PListView
FriendlyName=List
Description=A list
UsesView=true
ParentClass=public PView

[properties]
Property int(0) ItemCount : The number of items in the list. Read-only.
	GetValue:CountItems(void)


Property enum(B_SINGLE_SELECTION_LIST) SelectionType : The list's selection mode
	GetValue:ListType(void)
	SetValue:SetListType(int->list_view_type)
	Enum:Single,B_SINGLE_SELECTION_LIST
	Enum:Multiple,B_MULTIPLE_SELECTION_LIST


Property int(0) SelectionMessage : The constant of the message sent when the selection changes
	GetValue:SelectionCommand(void)
	SetValue:SetSelectionMessage(embedded)
BeginEmbeddedCode
		BMessage selMsg(*intval.value);
		backend->SetSelectionMessage(&selMsg);
EndEmbeddedCode
		

Property int(0) InvocationMessage : The constant of the message sent when an item is invoked
	GetValue:InvocationCommand(void)
	SetValue:SetInvocationMessage(embedded)
BeginEmbeddedCode
		BMessage invMsg(*intval.value);
		backend->SetInvocationMessage(&invMsg);
EndEmbeddedCode


Property float(0) PreferredHeight
	GetValue:GetPreferredSize(embedded)
BeginEmbeddedCode
		if (backend->CountItems() == 0)
			((FloatProperty*)prop)->SetValue(30);
		else
		{
			float pw, ph;
			backend->GetPreferredSize(&pw, &ph);
			if (pw < 10)
				pw = 100;
			if (ph < 10)
				ph = 30;
			((FloatProperty*)prop)->SetValue(ph);
		}
EndEmbeddedCode


Property float(0) PreferredWidth
	GetValue:GetPreferredSize(embedded)
BeginEmbeddedCode
		if (backend->CountItems() == 0)
			((FloatProperty*)prop)->SetValue(100);
		else
		{
			float pw, ph;
			backend->GetPreferredSize(&pw, &ph);
			if (pw < 10)
				pw = 100;
			if (ph < 10)
				ph = 30;
			((FloatProperty*)prop)->SetValue(pw);
		}
EndEmbeddedCode

[methods]
Method ScrollTo
	Param float x(float), 1
	Param float y(float), 2

Method ScrollToPoint
	CallName ScrollTo
	Param point pt(point), 1

Method ScrollToSelection

Method IsItemSelected
	Param int32 index(int32), 1
	Return bool value(bool), -1

Method Select
	Param int32 index(int32), 1 : Index of the item to select.
	Param bool extend(bool){false}, 2 : True: add the item to the selection. False: Replace the selection with the item.

Method SelectRange
	CallName Select
	Param int32 from(int32), 1
	Param int32 to(int32), 2
	Param bool extend(bool){false}, 3 : True: add the item to the selection. False: Replace the selection with the item.

Method DeselectAll

Method DeselectExcept
	Param int32 from(int32), 1
	Param int32 to(int32), 2

Method Deselect
	Param int32 index(int32), 1

Method InvalidateItem
	Param int32 index(int32), 1

Method MakeEmpty

Method IndexOf
	Param point point(point), 1

Method Invoke
	Param int32 message(int32){-1}, 1 : The optional message constant to send
BeginEmbeddedCode
	if (!pobject || !in || !out)
		return B_ERROR;
	
	PView *parent = static_cast<PView*>(pobject);
	if (!parent)
		return B_BAD_TYPE;
	
	BListView *backend = (BListView*)parent->GetView();
	
	PArgs args(in);
	int32 what;
	if (args.FindInt32("message", &what) != B_OK)
		what = -1;
	
	if (backend->Window())
		backend->Window()->Lock();
	
	if (what >= 0)
	{
		BMessage invMsg(what);
		backend->Invoke(&invMsg);
	}
	else	
		backend->Invoke();
	
	if (backend->Window())
		backend->Window()->Unlock();
	
	return B_OK;
EndEmbeddedCode

Method SwapItems
	Param int32 first(int32), 1 : Index of the first item to swap
	Param int32 second(int32), 2 : Index of the second item to swap
	Return bool value(bool), -1 : True if successful

Method MoveItem
	Param int32 from(int32), 1 : Index of the item to move
	Param int32 to(int32), 2 : Index to move the item to
	Return bool value(bool), -1 : True if successful

Method ItemFrame
	Param int32 index(int32), 1
	Return rect value(rect), -1

Method AddItem
	Param string label(string){""}, 1 : Text label of the new item. Optional.
	Param int32 index(int32){-1}, 2 : Index to insert the new item. If omitted, item is inserted at the end of the list.
	Return bool value(bool), -1 : True if successful
BeginEmbeddedCode
	if (!pobject || !in || !out)
		return B_ERROR;
	
	PView *parent = static_cast<PView*>(pobject);
	if (!parent)
		return B_BAD_TYPE;
	
	BListView *backend = (BListView*)parent->GetView();
	
	PArgs args(in), outArgs(out);
	BString label;
	if (args.FindString("label", &label) != B_OK)
		label = "";
	
	int32 index;
	if (args.FindInt32("index", &index) != B_OK)
		index = -1;
	
	if (backend->Window())
		backend->Window()->Lock();
	
	bool outValue;
	BStringItem *item = new BStringItem(label.String());
	if (index >= 0)
		outValue = backend->AddItem(item);
	else
		outValue = backend->AddItem(item, index);
	
	if (backend->Window())
		backend->Window()->Unlock();
	
	outArgs.MakeEmpty();
	outArgs.AddBool("value", outValue);
	
	return B_OK;
EndEmbeddedCode

Method AddItems
	Param list label(list), 1 : Text label of the new item. Optional.
	Param int32 index(int32), 2? : Index to insert the new item. If omitted, item is inserted at the end of the list.
BeginEmbeddedCode
	if (!pobject || !in || !out)
		return B_ERROR;
	
	PView *parent = static_cast<PView*>(pobject);
	if (!parent)
		return B_BAD_TYPE;
	
	BListView *backend = (BListView*)parent->GetView();
	
	PArgs args(in), outArgs(out);
	PArgs nameList;
	if (args.FindList("items", nameList) != B_OK)
		return B_ERROR;
	
	int32 index;
	if (args.FindInt32("index", &index) != B_OK)
		index = -1;
	
	if (backend->Window())
		backend->Window()->Lock();
	
	PArgListItem *item = nameList.GetFirstItem();
	BList list;
	while (item)
	{
		if (item->type == PARG_STRING)
		{
			BStringItem *newItem = new BStringItem((const char *)item->data);
			list.AddItem(newItem);
		}
		item = nameList.GetNextItem(item);
	}
	
	bool outValue = true;
	if (list.CountItems() > 0)
	{
		if (index >= 0)
			outValue = backend->AddList(&list, index);
		else
			outValue = backend->AddList(&list);
	}
		
	if (backend->Window())
		backend->Window()->Unlock();
	
	outArgs.MakeEmpty();
	outArgs.AddBool("value", outValue);
	
	return B_OK;
EndEmbeddedCode

Method RemoveItem
	Param int32 index(int32), 1 : Index of the item to remove
	Return bool value(bool), -1
BeginEmbeddedCode
	if (!pobject || !in || !out)
		return B_ERROR;
	
	PView *parent = static_cast<PView*>(pobject);
	if (!parent)
		return B_BAD_TYPE;
	
	BListView *backend = (BListView*)parent->GetView();
	
	PArgs args(in), outArgs(out);
	int32 index;
	if (args.FindInt32("index", &index) != B_OK)
		return B_ERROR;
	
	if (backend->Window())
		backend->Window()->Lock();
	
	bool outValue = backend->RemoveItems(index, 1);
	
	if (backend->Window())
		backend->Window()->Unlock();
	
	outArgs.MakeEmpty();
	outArgs.AddBool("value", outValue);
	
	return B_OK;
EndEmbeddedCode
	
Method RemoveItems
	Param int32 index(int32), 1 : Starting index of first item to remove
	Param int32 count(int32), 2 : Number of items to remove
	Return bool value(bool), -1


[backend]
Type=Subclass
Class=PListViewBackend
ParentClass=public BListView
InitCode=BRect(0,0,1,1),"", B_SINGLE_SELECTION_LIST

[events]
EmbeddedHook SelectionChanged : void	SelectionChanged(void);
BeginEmbeddedCode
void
%(BACKENDNAME)::SelectionChanged(void)
{
	PArgs in, out;
	EventData *data = fOwner->FindEvent("SelectionChanged");
	if (data->hook)
		fOwner->RunEvent(data, in.ListRef(), out.ListRef());
	else
		%(BACKEND_PARENT_NAME)::SelectionChanged();
}


EndEmbeddedCode


EmbeddedHook InitiateDrag : bool	InitiateDrag(BPoint pt, int32 index, bool initiallySelected);
BeginEmbeddedCode
bool
%(BACKENDNAME)::InitiateDrag(BPoint pt, int32 index, bool initiallySelected)
{
	PArgs in, out;
	in.AddPoint("point", pt);
	in.AddInt32("index", index);
	in.AddBool("selected", initiallySelected);
	EventData *data = fOwner->FindEvent("SelectionChanged");
	if (data->hook)
	{
		fOwner->RunEvent(data, in.ListRef(), out.ListRef());
		bool outValue;
		if (out.FindBool("value", &outValue) != B_OK)
			outValue = false;
		return outValue;
	}
	else
		return %(BACKEND_PARENT_NAME)::InitiateDrag(pt, index, initiallySelected);
	
	// Quiet the compiler
	return false;
}


EndEmbeddedCode
