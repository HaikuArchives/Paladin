[global]
Module=PMenuItem
Header=PMenuItem.h
CodeFileName=PMenuItem.cpp
ParentHeaderName="PObject.h"

[includes]
<MenuItem.h>
"PMenu.h"
"PMenuPriv.h"

[object]
Name=PMenuItem
FriendlyName=MenuItem
Description=An item in a menu
UsesView=false
ParentClass=public PObject
GetBackend=true

[properties]
Property int(0) Message : The message constant for the menu item
	GetValue:Command(int)
	SetValue:SetMessage(embedded)
BeginEmbeddedCode
		prop->GetValue(&intval);
		backend->SetMessage(new BMessage(*intval.value));
EndEmbeddedCode

Property int(0) Target : The ID of the target for the item's message

Property string("") Label : The text of the menu item.
	GetValue:Label(void)
	SetValue:SetLabel(string)

Property bool(true) Enabled : The 'enabled' state for the item.
	GetValue:IsEnabled(void)
	SetValue:SetEnabled(bool)

Property bool(false) Marked : True if the item is checked
	GetValue:IsMarked(void)
	SetValue:SetMarked(bool)

Property char(0) Trigger : The letter trigger used when the item is open.
	GetValue:Trigger(void)
	SetValue:SetTrigger(char)

Property rect(BRect(0,0,0,0)) Frame : The frame of the menu item
	GetValue:Frame(void)

[methods]
Method SetShortcut
	Param char shortcut(char), 1 : character to define as the item's shortcut
	Param int32 modifiers(int32)[0], 2 : constants for modifier keys, like the Control key.

Method GetShortcut
	CallName Shortcut
	Return char shortcut(char), -1 : the item's shortcut character
	Return uint32 modifiers(&uint32), 1 : the item's shortcut modifier keys

Method Submenu
	Return int64 id(int64), 1 : object ID of the submenu, if there is one.
BeginEmbeddedCode
	if (!pobject || !in || !out)
		return B_ERROR;
	
	PView *parent = static_cast<PView*>(pobject);
	if (!parent)
		return B_BAD_TYPE;
	
	BMenuItem *backend = (BMenuItem*)parent->GetView();
	
	PArgs *outArgs = static_cast<PArgs*>(out);
	outArgs->MakeEmpty();
	
	BMenu *submenu = backend->Submenu();
	
	PMenuBackend *menuBackend = static_cast<PMenuBackend*>(submenu);
	if (menuBackend)
	{
		PMenu *pmenu = menuBackend->GetOwner();
		outArgs.AddInt64("id", pmenu->GetID());
	}
	else
		outArgs.AddInt64("id", 0);
	
	return B_OK;
EndEmbeddedCode

Method Submenu
	Return int64 id(int64), 1 : object ID of the owning menu, if there is one.
BeginEmbeddedCode
	if (!pobject || !in || !out)
		return B_ERROR;
	
	PView *parent = static_cast<PView*>(pobject);
	if (!parent)
		return B_BAD_TYPE;
	
	BMenuItem *backend = (BMenuItem*)parent->GetView();
	
	PArgs *outArgs = static_cast<PArgs*>(out);
	outArgs->MakeEmpty();
	
	BMenu *menu = backend->Menu();
	
	PMenuBackend *menuBackend = static_cast<PMenuBackend*>(menu);
	if (menuBackend)
	{
		PMenu *pmenu = static_cast<PMenu*>(menuBackend->GetOwner());
		outArgs->AddInt64("id", pmenu->GetID());
	}
	else
		outArgs->AddInt64("id", 0);
	
	return B_OK;
EndEmbeddedCode

[backend]
Type=Subclass
Class=PMenuItemBackend
ParentClass=public BMenuItem
InitCode="", new BMessage(), 0, 0
