[global]
Module=PTextControl
Header=PTextControl.h
CodeFileName=PTextControl.cpp
ParentHeaderName="PControl.h"

[includes]
<Application.h>
<Slider.h>
<stdio.h>
<Window.h>
"AutoTextControl.h"

[object]
Name=PTextControl
FriendlyName=Text Control
Description=A single-line text editing control
UsesView=true
ParentClass=public PControl
GetBackend=true

[properties]
Property string(NULL) Text : The control's text
	GetValue:Text(void)
	SetValue:SetText(string)

Property float(0.0) Divider
	GetValue:Divider(void)
	SetValue:SetDivider(float)

Property enum(B_ALIGN_LEFT) TextAlignment
	GetValue:GetAlignment(embedded)
BeginEmbeddedCode
		alignment label, text;
		backend->GetAlignment(&label, &text);
		((IntProperty*)prop)->SetValue(text);
EndEmbeddedCode
	SetValue:SetAlignment(embedded)
BeginEmbeddedCode
		prop->GetValue(&intval);
		
		alignment label,text;
		backend->GetAlignment(&label,&text);
		text = (alignment)*intval.value;
		backend->SetAlignment(label,text);
EndEmbeddedCode
	Enum:Left,B_ALIGN_LEFT
	Enum:Center,B_ALIGN_CENTER
	Enum:Right,B_ALIGN_RIGHT

Property enum(B_ALIGN_LEFT) LabelAlignment
	GetValue:GetAlignment(embedded)
BeginEmbeddedCode
		alignment label, text;
		backend->GetAlignment(&label, &text);
		((IntProperty*)prop)->SetValue(text);
EndEmbeddedCode
	SetValue:SetAlignment(embedded)
BeginEmbeddedCode
		prop->GetValue(&intval);
		
		alignment label, text;
		backend->GetAlignment(&label, &text);
		label = (alignment)*intval.value;
		backend->SetAlignment(label, text);
EndEmbeddedCode
	Enum:Left,B_ALIGN_LEFT
	Enum:Center,B_ALIGN_CENTER
	Enum:Right,B_ALIGN_RIGHT

[methods]
Method SetPreferredDivider
BeginEmbeddedCode
	if (!pobject || !in || !out)
		return B_ERROR;
	
	PTextControl *pcontrol = static_cast<PTextControl*>(pobject);
	PObject *object = static_cast<PObject*>(pobject);
	
	if (!object->UsesInterface("PTextControl") || !pcontrol)
		return B_BAD_TYPE;
	
	BTextControl *backend = dynamic_cast<BTextControl*>(pcontrol->GetView());
	if (!backend)
		return B_BAD_TYPE;
	
	if (backend->Window())
		backend->Window()->Lock();
	
	if (strlen(backend->Label()) > 0)
		backend->SetDivider(backend->StringWidth(backend->Label()));
	else
		backend->SetDivider(0.0);
	
	if (backend->Window())
		backend->Window()->Unlock();
	
	return B_OK;
EndEmbeddedCode


[backend]
Type=Subclass
Class=PTextControlBackend
ParentClass=public AutoTextControl
InitCode=BRect(0, 0, 1, 1), "", "", "",new BMessage()
