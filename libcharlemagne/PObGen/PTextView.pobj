[global]
Module=PTextView
Header=PTextView.h
CodeFileName=PTextView.cpp
ParentHeaderName="PView.h"

[includes]
<Application.h>
<TextView.h>
<stdio.h>
"PClipboard.h"
"PObjectBroker.h"
<Window.h>

[object]
Name=PTextView
FriendlyName=Text Editor
Description=A multi-line text editing control
UsesView=true
ParentClass=public PView
GetBackend=true

[properties]
Property enum(B_ALIGN_LEFT) Alignment : The current alignment mode of the text view's contents
	GetValue:Alignment(void)
	SetValue:SetAlignment(int->alignment)
	Enum:Left,B_ALIGN_LEFT
	Enum:Center,B_ALIGN_CENTER
	Enum:Right,B_ALIGN_RIGHT

Property bool(false) AutoIndent : Toggles autoindenting of new lines
	GetValue:DoesAutoindent(void)
	SetValue:SetAutoindent(bool)

Property int(B_CMAP8) ColorSpace : Color space of the offscreen bitmap used to draw the text
	GetValue:ColorSpace(void)
	SetValue:SetColorSpace(int->color_space)

Property int(0) CurrentLine : The line containing the insertion point
	GetValue:CurrentLine(void)
	SetValue:GoToLine(int32)

Property bool(true) Editable : If the text view accepts typing
	GetValue:IsEditable(void)
	SetValue:MakeEditable(bool)

Property bool(false) HideTyping : Hides typing, such as for a password box
	GetValue:IsTypingHidden(void)
	SetValue:HideTyping(bool)

Property int(0) LineCount : The current line count.
	GetValue:CountLines(void)

Property int(0) MaxBytes : The maximum number of bytes the text view will accept.
	GetValue:MaxBytes(void)
	SetValue:SetMaxBytes(int32)

Property bool(false) Resizable : Whether or not the text view will resize itself to contain its contents
	GetValue:IsResizable(void)
	SetValue:MakeResizable(bool)

Property bool(true) Selectable : Whether or not the user can select the text view's contents
	GetValue:IsSelectable(void)
	SetValue:MakeSelectable(bool)

Property bool(false) Stylable : Whether or not the text view will display multiple text styles
	GetValue:IsStylable(void)
	SetValue:SetStylable(bool)

Property float(10.0) TabWidth : The number of pixels indented for each tab character
	GetValue:TabWidth(void)
	SetValue:SetTabWidth(float)

Property string(NULL) Text : The contents of the text view.
	GetValue:Text(void)
	SetValue:SetText(string)

Property int(0) TextLength : The number of bytes occupied by the text view's contents, excluding the NULL terminator
	GetValue:TextLength(void)

Property rect(BRect(0, 0, 1, 1)) TextRect : The size and location of the area used to display text
	GetValue:TextRect(void)
	SetValue:SetTextRect(rect)

Property bool(true) Undoable : Whether or not the text view supports undo
	GetValue:DoesUndo(void)
	SetValue:SetDoesUndo(bool)

Property bool(true) UseWordWrap : Whether or not the text view wraps text to fit its size
	GetValue:DoesWordWrap(void)
	SetValue:SetWordWrap(bool)

[methods]
Method AllowChars
	Param string chars(string), 1 : The set of characters to allow
BeginEmbeddedCode
	if (!pobject || !in || !out)
		return B_ERROR;
	
	PView *parent = static_cast<PView*>(pobject);
	if (!parent)
		return B_BAD_TYPE;
	
	BTextView *backend = (BTextView*)parent->GetView();
	
	PArgs *args = static_cast<PArgs*>(in);
	BString string;
	if (args->FindString("chars", &string) != B_OK)
		return B_ERROR;
	
	if (backend->Window())
		backend->Window()->Lock();
	
	for (int32 i = 0; i < string.CountChars(); i++)
	{
		char c = string.ByteAt(i);
		if (c)
			backend->AllowChar(c);
	}
	
	if (backend->Window())
		backend->Window()->Unlock();
	
	return B_OK;
EndEmbeddedCode

Method ByteAt
	CallName ByteAt
	Param int32 offset(int32), 1 : Offset of the byte to get.
	Return char value(char), -1 : 1-byte character at the specified offset.

Method CanEndLine
	CallName ByteAt
	Param int32 offset(int32), 1 : Offset to test for line ending
	Return bool value(bool), -1 : True if the character can be the last one on a line.

Method Copy
	Param int64 clipid(int64), 1 : The id of a clipboard object
BeginEmbeddedCode
	if (!pobject || !in || !out)
		return B_ERROR;
	
	PView *parent = static_cast<PView*>(pobject);
	if (!parent)
		return B_BAD_TYPE;
	
	BTextView *backend = (BTextView*)parent->GetView();
	
	PArgs *inArgs = static_cast<PArgs*>(in);
	
	uint64 id = 0;
	if (args->FindInt64("clipid", (int64*)&id) != B_OK)
		return B_ERROR;
	
	PObject *obj = BROKER->FindObject(id);
	if (!obj || obj->GetType().ICompare("PClipboard") != 0)
		return B_BAD_DATA;
	
	PClipboard *clip = dynamic_cast<PClipboard*>(obj);
	
	if (backend->Window())
		backend->Window()->Lock();
	
	backend->Copy(clip->GetBackend());
	
	if (backend->Window())
		backend->Window()->Unlock();
	
	return B_OK;
EndEmbeddedCode

Method Cut
	Param int64 clipid(int64), 1 : The id of a clipboard object
BeginEmbeddedCode
	if (!pobject || !in || !out)
		return B_ERROR;
	
	PView *parent = static_cast<PView*>(pobject);
	if (!parent)
		return B_BAD_TYPE;
	
	BTextView *backend = (BTextView*)parent->GetView();
	
	PArgs *inArgs = static_cast<PArgs*>(in);
	
	uint64 id = 0;
	if (args->FindInt64("clipid", (int64*)&id) != B_OK)
		return B_ERROR;
	
	PObject *obj = BROKER->FindObject(id);
	if (!obj || obj->GetType().ICompare("PClipboard") != 0)
		return B_BAD_DATA;
	
	PClipboard *clip = dynamic_cast<PClipboard*>(obj);
	
	if (backend->Window())
		backend->Window()->Lock();
	
	backend->Cut(clip->GetBackend());
	
	if (backend->Window())
		backend->Window()->Unlock();
	
	return B_OK;
EndEmbeddedCode

Method Delete
	CallName Delete
	Param int32 start(int32), 1 : Starting offset of the range to delete.
	Param int32 end(int32), 2 : Ending offset of the range to delete.

Method DisallowChars
	Param string chars(string), 1 : The set of characters to disallow
BeginEmbeddedCode
	if (!pobject || !in || !out)
		return B_ERROR;
	
	PView *parent = static_cast<PView*>(pobject);
	if (!parent)
		return B_BAD_TYPE;
	
	BTextView *backend = (BTextView*)parent->GetView();
	
	PArgs *inArgs = static_cast<PArgs*>(in);
	BString string;
	if (args->FindString("chars", &string) != B_OK)
		return B_ERROR;
	
	if (backend->Window())
		backend->Window()->Lock();
	
	for (int32 i = 0; i < string.CountChars(); i++)
	{
		char c = string.ByteAt(i);
		if (c)
			backend->DisallowChar(c);
	}
	
	if (backend->Window())
		backend->Window()->Unlock();
	
	return B_OK;
EndEmbeddedCode

Method FindWord
	CallName FindWord
	Param int32 offset(int32), 1 : Starting point for searching for a word
	Return int32 start(&int32), 2 : Starting offset of the next word
	Return int32 end(&int32), 3 : Ending offset of the next word

Method GetInsets
	CallName GetInsets
	Return float left(&float), 1 : Left inset
	Return float top(&float), 2 : Top inset
	Return float right(&float), 3 : Right inset
	Return float bottom(&float), 4 : Bottom inset

Method GetSelection
	CallName GetSelection
	Return int32 start(&int32), 1 : Starting offset of the selection
	Return int32 end(&int32), 2 : Ending offset of the selection

Method GetText
	Param int32 start(int32), 1 : Starting offset of the text
	Param int32 end(int32), 2 : Ending offset of the text
BeginEmbeddedCode
	if (!pobject || !in || !out)
		return B_ERROR;
	
	PView *parent = static_cast<PView*>(pobject);
	if (!parent)
		return B_BAD_TYPE;
	
	BTextView *backend = (BTextView*)parent->GetView();
	
	PArgs *inArgs = static_cast<PArgs*>(in), *outArgs = static_cast<PArgs*>(out);
	outArgs->MakeEmpty();
	
	if (backend->Window())
		backend->Window()->Lock();
	
	int32 start, length;
	if (args->FindInt32("start", &start) != B_OK ||
		args->FindInt32("length", &length) != B_OK)
		return B_ERROR;
	
	char *buffer = new char[length + 1];
	
	backend->GetText(start, length, buffer);
	
	outArgs->AddString("text", buffer);
	
	delete [] buffer;
	
	if (backend->Window())
		backend->Window()->Unlock();
	
	return B_OK;
EndEmbeddedCode

Method Highlight
	CallName Highlight
	Param int32 start(int32), 1 : Starting offset of the text to highlight
	Param int32 end(int32), 2 : Ending offset of the text to highlight

Method Insert
	CallName Insert
	Param string text(string), 1 : The text to insert
	OptParam int32 length(int32), 2 : How much of the string to insert

Method LineAtOffset
	CallName LineAt
	Param int32 offset(int32), 1 : Offset to find the line for
	Return int32 line(int32), -1 : Line for the specified offset

Method LineAtPoint
	CallName LineAt
	Param point point(point), 1 : Point to find the line for
	Return int32 pointline(int32), -1 : Line for the specified point.

Method Paste
	Param int64 clipid(int64), 1 : Object ID of a PClipboard object
BeginEmbeddedCode
	if (!pobject || !in || !out)
		return B_ERROR;
	
	PView *parent = static_cast<PView*>(pobject);
	if (!parent)
		return B_BAD_TYPE;
	
	BTextView *backend = (BTextView*)parent->GetView();
	
	PArgs *inArgs = static_cast<PArgs*>(in);
	
	uint64 id = 0;
	if (args->FindInt64("clipid", (int64*)&id) != B_OK)
		return B_ERROR;
	
	PObject *obj = BROKER->FindObject(id);
	if (!obj || obj->GetType().ICompare("PClipboard") != 0)
		return B_BAD_DATA;
	
	PClipboard *clip = dynamic_cast<PClipboard*>(obj);
	
	if (backend->Window())
		backend->Window()->Lock();
	
	backend->Paste(clip->GetBackend());
	
	if (backend->Window())
		backend->Window()->Unlock();
	
	return B_OK;
EndEmbeddedCode

Method PointAt
	CallName PointAt
	Param int32 offset(int32), 1 : Offset to get the point for
	Return point point(point), -1 : Point for the offset specified
	Return float height(&float), 2 : Height of the line at the specified offset

Method ScrollToOffset
	CallName ScrollToOffset
	Param int32 offset(int32), 1 : Offset to scroll to

Method ScrollToSelection
	CallName ScrollToSelection

Method Select
	CallName Select
	Param int32 start(int32), 1 : Starting offset of the next word
	Param int32 end(int32), 2 : Ending offset of the next word

Method SelectAll
	CallName SelectAll

Method SetInsets
	CallName SetInsets
	Param float left(float), 1 : Left inset
	Param float top(float), 2 : Top inset
	Param float right(float), 3 : Right inset
	Param float bottom(float), 4 : Bottom inset

Method SetText
	CallName SetText
	Param string text(string), 1 : Text to set the Text View to
	Param int32 length(string), 2 : Length of the text to insert

Method TextHeight
	CallName TextHeight
	Param int32 start(int32), 1 : Starting offset of the text to highlight
	Param int32 end(int32), 2 : Ending offset of the text to highlight
	Return float height(float), -1 : Total height of the lines specified by the given offsets

Method Undo
	Param int64 clipid(int64), 1 : Object ID of a PClipboard object
BeginEmbeddedCode
	if (!pobject || !in || !out)
		return B_ERROR;
	
	PView *parent = static_cast<PView*>(pobject);
	if (!parent)
		return B_BAD_TYPE;
	
	BTextView *backend = (BTextView*)parent->GetView();
	
	PArgs *inArgs = static_cast<PArgs*>(in);
	
	uint64 id = 0;
	if (args->FindInt64("clipid", (int64*)&id) != B_OK)
		return B_ERROR;
	
	PObject *obj = BROKER->FindObject(id);
	if (!obj || obj->GetType().ICompare("PClipboard") != 0)
		return B_BAD_DATA;
	
	PClipboard *clip = dynamic_cast<PClipboard*>(obj);
	
	if (backend->Window())
		backend->Window()->Lock();
	
	backend->Undo(clip->GetBackend());
	
	if (backend->Window())
		backend->Window()->Unlock();
	
	return B_OK;
EndEmbeddedCode


[backend]
Type=Subclass
Class=PTextViewBackend
ParentClass=public BTextView
InitCode=BRect(0,0,99,99), "textview", BRect(5,5,94,94), B_FOLLOW_LEFT | B_FOLLOW_TOP
