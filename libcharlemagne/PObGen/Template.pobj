[global]
Module=Name of object's module
Header=Name of object's header file
CodeFileName=Name of object's source file

# ParentHeaderName should be the name of the header for the parent
# class of the *object*, not the backend. Many times this line will be
# PObject.h or something similar.
ParentHeaderName=

[includes]

[object]
Name=Name of object
FriendlyName=object's friendly name
Description=object's description
UsesView=false
ParentClass=public PObject
GetBackend=true

# Property list
# The format for a property entry is as follows:
#
# Property propType(defaultValue) propName : property description
#	GetValue:methodNameToGetValue(typeReturned)
#	SetValue:methodNameToSetValue(typeToUse)
#
# A basic property entry looks like this:
#
# Property int(0) MyProperty : description of My Property
#	GetValue:GetMyProperty(int)
#	SetValue:SetMyProperty(int)
#
# Casting can be done for SetValue using an arrow: (int->time_t). This will
# cause the value to be cast to the second type when the SetValue method is
# called.
#
# When a get method returns a value by receiving a pointer, use an
# ampersand with the type: (&int)
#
# Read-only properties just leave out the SetValue entry
#
# Properties which don't call any backend methods can leave out both
# lines entirely.
#
# Possible property types are int, string, bool, float, char,
# rect, point, color, enum, and pointer.
#
# Enumerated properties must also have a series of Enum lines which
# define the values for the enumerated type. Valid characters for
# enumerated value names are alphanumerics, spaces, and underscores. 
# An Enum line looks like this:
#
# Enum:Left,B_ALIGN_LEFT
#
# where the name of the value comes first and the value -- which may
# be a constant -- comes second. Any enumeration names which use spaces
# must be enclosed in double quotes.

[properties]

# Method list
# The format for a method entry is as follows:
#
# Method methodName
#	CallName callMethodName
#	Param paramType paramName(castType), callIndex : parameter description
#	Return returnValType returnValName(castType), callIndex : returnVal description
#
# A basic method entry could look like this:
#
# Method TextHeight
#	CallName TextHeight
#	Param int32 start(int32), 1 : Starting offset of the text to highlight
#	Param int32 end(int32), 2 : Ending offset of the text to highlight
#	Return float height(float), -1 : Total height of the lines specified by the given offsets
#
# Each method entry consists of a series of lines describing its input
# and output values. The CallName line is to denote the name of the
# backend method to call when it is not the same as the name in the Method line.
#
# A parameter may be optional if it is given a default value. This is done by
# placing the default value in brackets after the cast type like this:
#
#	Param int32 start(int32)[0], 1 : Starting offset of the text to highlight
#
# The start parameter in this case defaults to zero.
#
#
# The call index is used to describe where in the backend method call the
# parameter should be placed. A value of -1 can be used in a Return line
# to denote that that particular return value for the Method gets its value
# from the return value of the backend call. The above example would be used
# for a backend call that looks like this:
#
# float start, end, height;
# height = backend->TextHeight(start, end);
#
#
# A method can also be embedded, which allows you to work around any
# limitations in the generator. C++ code is placed in between a
# BeginEmbeddedCode line and an EndEmbeddedCode line. Param and Return lines
# should still be used with embedded methods so that the method's interface
# can be determined at runtime.

[methods]

# Backend definition

[backend]

# The type can be Single, Subclass, or Unique. Subclass means that the
# backend is a subclass of a parent class. BView-based backends are almost
# always Subclass type. Single is for backends which just need an instance
# of the class, such as BEntry or BFile. Unique is for backends which have
# a single global variable to interact with, such as be_roster or be_clipboard.
Type=Single

# The Class entry is for the name of the backend's class. This will be a new
# class name for Subclass backends and an existing class for the others.
Class=backend class name

# The ParentClass entry is used only for Subclass backends to hold the name
# of the backend's parent class.
# ParentClass=

# InitCode lines are for code to initialize the backend. For Subclass backends,
# this is placed into the initializer for the parent class. It is placed into
# the constructor for Single backends. It can be omitted if the backend has
# a default constructor and it will be ignored for Unique backends. The line
# should include everything which goes inside the parentheses for the call.
InitCode=

# The UniqueVar entry is only for Unique backends. It is the name of the
# variable to access for calls to the backend, e.g. be_roster for the PRoster
# object.
# UniqueVar=

# Event definitions

# This section is for Subclass backends only and is for attaching to
# hook functions defined by the backend. BView-based objects only need Event
# entries if they define hook functions not already created by BView.
#
# PListView defines the SelectionChanged event, for example.
#
# An event entry follows this format:
#
# EventHook eventName
#	Param paramType paramName(castType)
#	Return returnType
#
# Just like Methods, Events can be embedded, as well, although there is more
# work involved. Here is an example:
#
# EmbeddedHook KeyDown : void	KeyDown(const char *bytes, int32 count);
# BeginEmbeddedCode
# void
# %(BACKENDNAME)::KeyDown(const char *bytes, int32 count)
# {
#	PArgs in, out;
#	in.AddItem("bytes", (void*)bytes, count, PARG_RAW);
#	in.AddInt32("count", count);
#	EventData *data = fOwner->FindEvent("KeyDown");
#	if (data->hook)
#		fOwner->RunEvent(data, in.ListRef(), out.ListRef());
#	else
#		%(BACKEND_PARENT_NAME)::KeyDown(bytes, count);
# }
#
#
# EndEmbeddedCode
#
# The first line declares the name of the event and the declaration line for
# the class definition is placed after the colon. A BeginEmbeddedCode /
# EndEmbeddedCode pair follows with the code for the entire function.
# Placeholders for the backend's class and parent class are placed in the code
# in appropriate places. Just like Methods, Param and Return lines are
# needed to determine the event's interface at runtime.

# [events]
