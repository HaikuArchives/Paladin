#!lua

-- Luagrep: A Lua-based regular expression search similar to grep

-- Copyright (c) 2011 DarkWyrm

-- Permission is hereby granted, free of charge, to any person obtaining a copy
-- of this software and associated documentation files (the "Software"), to deal
-- in the Software without restriction, including without limitation the rights
-- to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-- copies of the Software, and to permit persons to whom the Software is
-- furnished to do so, subject to the following conditions:

-- The above copyright notice and this permission notice shall be included in
-- all copies or substantial portions of the Software.

-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-- IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-- FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-- AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-- LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-- OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
-- THE SOFTWARE.

--[[
	Usage: luagrep [options] PATTERN [filename] [filename2] ...
	Options:
		-f, --fixed			PATTERN is to be treated as a literal string, not a pattern
		-i, --ignore-case	perform a case-insensitive search
]]

local results = {}

function GrepFile(path, searchString, options)
	-- actually searches the file
	if (not path) then
		error("Nil path in GrepFile")
	end
	
	local file = io.open(path, "r")
	if (not file) then
		print("Couldn't open file '" .. path .. "'")
		os.exit(1)
	end
	
	local data = {}
	for line in file:lines() do
		table.insert(data, line)
	end
	
	local pattern = nil
	
	for i = 1, #data do
		local line = data[i]:find(searchString, 1, options["fixed"])
		if (line) then
			local match = {}
			match.file = path
			match.line = i
			match.string = data[i]
			table.insert(results, match)
		end
	end
end


function PrintResultsNormal(matches)
	-- Takes a table and prints them
	-- The format is filename:\t<result>
	for i = 1, #matches do
		local out = {}
		out[1] = matches[i].file
		out[2] = matches[i].line
		out[3] = matches[i].string
		print(table.concat(out,":"))
	end
	
end

-----------------------------------------------------------------------------
-- Main script execution

local optionList = {
	["-f"] = "fixed",
	["--fixed"] = "fixed",
}

local options = {}
local searchPattern = nil

local argIndex = 1
if (arg[1] == "-f" or arg[1] == "--fixed") then
	optionList["fixed"] = true
	argIndex = 2
end

searchPattern = arg[argIndex]

for i = argIndex + 1, #arg do
	GrepFile(arg[i], searchPattern, options)
end

PrintResultsNormal(results)
